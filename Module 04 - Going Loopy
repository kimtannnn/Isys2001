{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kimtannnn/Isys2001/blob/main/Module%2004%20-%20Going%20Loopy\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YEhQBhnBBoOj"
      },
      "source": [
        "# Week 4 Mini-Project: Loop-Powered Finance Tracker\n",
        "## Adding Repetition to Your Financial Decision System\n",
        "\n",
        "**Duration:** 45-60 minutes  \n",
        "**Goal:** Apply this week's loop patterns to enhance your Week 2 finance tracker\n",
        "\n",
        "### Project Overview\n",
        "\n",
        "Take your Week 2 single-decision finance tracker and add **loop power**:\n",
        "- 🔄 Handle multiple expense entries in one session\n",
        "- ✅ Validate all user input properly\n",
        "- 📊 Calculate running totals and basic statistics\n",
        "- 🎯 Track multiple savings goals\n",
        "- 🎮 Create a simple menu system\n",
        "\n",
        "This builds the **data collection foundation** for your semester-long finance tracker project.\n",
        "\n",
        "### Learning Objectives\n",
        "\n",
        "- Apply while loops for input validation\n",
        "- Use for loops for known repetition\n",
        "- Implement sentinel value patterns\n",
        "- Practice list storage and basic processing\n",
        "- Build user-controlled program flow\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-LxOJLf6BoOr"
      },
      "source": [
        "## Part 1: Enhanced Expense Entry (15 minutes)\n",
        "\n",
        "### 🔄 From One to Many\n",
        "\n",
        "Transform your Week 2 single-expense tracker to handle multiple expenses with proper validation:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Sjf5qla3BoOs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3cbe607d-404d-4c2d-efe1-cdd513c3cc0b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=== Enhanced Finance Tracker v0.3 ===\n",
            "Week 3: Loop-Powered Edition\n",
            "\n",
            "Enter your name: Kim\n",
            "Enter monthly budget ($100-$10,000): $100\n",
            "\n",
            "Welcome Kim! Monthly budget: $100.00\n",
            "\n",
            "--- Enter Your Expenses ---\n",
            "Type 'done' when finished entering expenses\n",
            "\n",
            "Expense amount (or 'done'): $10\n",
            "Description: Com\n",
            "Running total: $10.00 (10.0% of budget)\n",
            "\n",
            "Expense amount (or 'done'): $done\n",
            "\n",
            "📊 Expense entry complete: 1 expenses, $10.00 total\n",
            "\n",
            "--- Expense List ---\n",
            "1. $10.00 - Com\n"
          ]
        }
      ],
      "source": [
        "print(\"=== Enhanced Finance Tracker v0.3 ===\")\n",
        "print(\"Week 3: Loop-Powered Edition\")\n",
        "print()\n",
        "\n",
        "# ===== User setup =====\n",
        "name = input(\"Enter your name: \")\n",
        "\n",
        "# Budget validation\n",
        "monthly_budget = 0\n",
        "while monthly_budget < 100 or monthly_budget > 10000:\n",
        "    try:\n",
        "        budget_input = input(\"Enter monthly budget ($100-$10,000): $\")\n",
        "        monthly_budget = float(budget_input)\n",
        "\n",
        "        if monthly_budget < 100:\n",
        "            print(\"Budget too low! Minimum $100\")\n",
        "        elif monthly_budget > 10000:\n",
        "            print(\"Budget seems high! Maximum $10,000\")\n",
        "    except ValueError:\n",
        "        print(\"Please enter a valid number!\")\n",
        "\n",
        "print(f\"\\nWelcome {name}! Monthly budget: ${monthly_budget:.2f}\")\n",
        "\n",
        "# ===== MULTI-EXPENSE ENTRY =====\n",
        "expenses = []       # Store amounts\n",
        "descriptions = []   # Store descriptions\n",
        "total_spent = 0     # Sum of all expenses\n",
        "\n",
        "print(\"\\n--- Enter Your Expenses ---\")\n",
        "print(\"Type 'done' when finished entering expenses\")\n",
        "\n",
        "while True:\n",
        "    expense_input = input(\"\\nExpense amount (or 'done'): $\")\n",
        "\n",
        "    # Check for sentinel value\n",
        "    if expense_input.lower() == \"done\":\n",
        "        break\n",
        "\n",
        "    # Validate: must be a positive number\n",
        "    try:\n",
        "        expense_amount = float(expense_input)\n",
        "        if expense_amount <= 0:\n",
        "            print(\"Amount must be positive!\")\n",
        "            continue\n",
        "    except ValueError:\n",
        "        print(\"Please enter a valid number!\")\n",
        "        continue\n",
        "\n",
        "    # Get description for this expense\n",
        "    desc = input(\"Description: \")\n",
        "\n",
        "    # Store data\n",
        "    expenses.append(expense_amount)\n",
        "    descriptions.append(desc)\n",
        "\n",
        "    # Update total spent\n",
        "    total_spent += expense_amount\n",
        "\n",
        "    # Show running total and budget percentage\n",
        "    percent = (total_spent / monthly_budget) * 100\n",
        "    print(f\"Running total: ${total_spent:.2f} ({percent:.1f}% of budget)\")\n",
        "\n",
        "print(f\"\\n📊 Expense entry complete: {len(expenses)} expenses, ${total_spent:.2f} total\")\n",
        "\n",
        "# Optional: Show all expenses\n",
        "print(\"\\n--- Expense List ---\")\n",
        "for i in range(len(expenses)):\n",
        "    print(f\"{i+1}. ${expenses[i]:.2f} - {descriptions[i]}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I1DgL0lgBoOw"
      },
      "source": [
        "---\n",
        "\n",
        "## Part 2: Basic Expense Analysis (15 minutes)\n",
        "\n",
        "### 📈 Processing Your Transaction Data\n",
        "\n",
        "Use loops to analyze the expenses you collected:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WWeJKCocBoOx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d0d898ab-7fab-419f-fc2e-04dd7d31b8d9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "📊 Expense Analysis:\n",
            "Total expenses: 1\n",
            "Total spent: $10.00\n",
            "Average expense: $10.00\n",
            "Budget used: 10.0%\n",
            "Remaining budget: $90.00\n",
            "\n",
            "💰 Expense Range:\n",
            "Highest expense: $10.00\n",
            "Lowest expense: $0.00\n",
            "\n",
            "📊 Expense Categories:\n",
            "Large expenses (>20% budget): 0\n",
            "Medium expenses (5-20% budget): 1\n",
            "Small expenses (<5% budget): 0\n",
            "\n",
            "💡 Smart Feedback:\n"
          ]
        }
      ],
      "source": [
        "# Expense Analysis Section\n",
        "if len(expenses) > 0:\n",
        "    print(\"\\n📊 Expense Analysis:\")\n",
        "\n",
        "    # Basic statistics using loop patterns from workshops\n",
        "    print(f\"Total expenses: {len(expenses)}\")\n",
        "    print(f\"Total spent: ${total_spent:.2f}\")\n",
        "    print(f\"Average expense: ${total_spent/len(expenses):.2f}\")\n",
        "    print(f\"Budget used: {(total_spent/monthly_budget)*100:.1f}%\")\n",
        "    print(f\"Remaining budget: ${monthly_budget - total_spent:.2f}\")\n",
        "\n",
        "    # Your task: Find highest and lowest expenses\n",
        "    # Use the min/max pattern from workshops\n",
        "    highest_expense = expenses[0]\n",
        "    lowest_expense = expenses[0]\n",
        "\n",
        "    # Your min/max finding code here\n",
        "    for expense in expenses:\n",
        "        if expense > highest_expense:\n",
        "            highest_expense = expense\n",
        "        if expense < lowest_expense:\n",
        "            lowest_expense = expense\n",
        "\n",
        "    print(f\"\\n💰 Expense Range:\")\n",
        "    print(f\"Highest expense: ${highest_expense:.2f}\")\n",
        "    print(f\"Lowest expense: ${lowest_expense:.2f}\")\n",
        "\n",
        "    # Your task: Categorize expenses by size\n",
        "    # Count how many expenses fall into each category:\n",
        "    # Large (>20% of budget), Medium (5-20%), Small (<5%)\n",
        "\n",
        "\n",
        "    large_count = 0    # > 20% of budget\n",
        "    medium_count = 0   # 5-20% of budget\n",
        "    small_count = 0    # < 5% of budget\n",
        "\n",
        "    for expense in expenses:\n",
        "        if expense > 20/100 * monthly_budget:\n",
        "            large_count += 1\n",
        "        elif expense > 5/100 * monthly_budget:\n",
        "            medium_count += 1\n",
        "        else:\n",
        "            small_count += 1\n",
        "\n",
        "    # Your categorization loop here\n",
        "\n",
        "    print(f\"\\n📊 Expense Categories:\")\n",
        "    print(f\"Large expenses (>20% budget): {large_count}\")\n",
        "    print(f\"Medium expenses (5-20% budget): {medium_count}\")\n",
        "    print(f\"Small expenses (<5% budget): {small_count}\")\n",
        "\n",
        "    # Your task: Provide smart feedback based on the analysis\n",
        "    # Give different advice based on spending patterns\n",
        "    print(\"\\n💡 Smart Feedback:\")\n",
        "\n",
        "    # Your feedback logic here\n",
        "    # Consider: budget percentage used, number of large expenses, etc.\n",
        "    budget_percent_used = (total_spent / monthly_budget) * 100\n",
        "    if budget_percent_used > 90:\n",
        "        print(\"Warning: You are close to exceeding your budget!\")\n",
        "    elif budget_percent_used > 75:\n",
        "        print(\"Caution: You have used more than 75% of your budget.\")\n",
        "    else:\n",
        "        print(\"Good job! You are keeping your spending under control.\")\n",
        "\n",
        "    if large_count > 2:\n",
        "        print(\"Tip: Try to reduce large expenses to save more money.\")\n",
        "    elif medium_count > large_count:\n",
        "        print(\"Most of your expenses are medium-sized. Keep tracking them.\")\n",
        "    else:\n",
        "        print(\"Your expenses are mostly small, which is great for saving.\")\n",
        "\n",
        "else:\n",
        "    print(\"\\n📝 No expenses entered - try adding some transactions!\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "auaGORkVBoOz"
      },
      "source": [
        "---\n",
        "\n",
        "## Part 3: Multiple Savings Goals Tracker (15 minutes)\n",
        "\n",
        "### 🎯 Goal Management with Loops\n",
        "\n",
        "Extend your tracker to handle multiple savings goals:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "q_V5Rq6CBoO0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "30771929-b023-48ae-e59b-83c317b2bfc7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "=== Savings Goals Tracker ===\n",
            "How many savings goals? (1-5): 5\n",
            "\n",
            "Entering 5 savings goals:\n",
            "\n",
            "--- Goal 1 ---\n",
            "Goal name: a\n",
            "Target amount: $100\n",
            "Current amount saved: $50\n",
            "\n",
            "--- Goal 2 ---\n",
            "Goal name: 1\n",
            "Target amount: $100\n",
            "Current amount saved: $40\n",
            "\n",
            "--- Goal 3 ---\n",
            "Goal name: aa\n",
            "Target amount: $100\n",
            "Current amount saved: $20\n",
            "\n",
            "--- Goal 4 ---\n",
            "Goal name: cc\n",
            "Target amount: $100\n",
            "Current amount saved: $0\n",
            "\n",
            "--- Goal 5 ---\n",
            "Goal name: ccc\n",
            "Target amount: $100\n",
            "Current amount saved: $50\n",
            "\n",
            "✅ Saved 5 goals!\n"
          ]
        }
      ],
      "source": [
        "print(\"\\n=== Savings Goals Tracker ===\")\n",
        "\n",
        "# Goal collection\n",
        "goal_names = []\n",
        "goal_targets = []\n",
        "goal_current = []\n",
        "\n",
        "# Ask how many goals they want to track\n",
        "num_goals = 0\n",
        "while num_goals < 1 or num_goals > 5:  # Reasonable limits\n",
        "    try:\n",
        "        num_goals = int(input(\"How many savings goals? (1-5): \"))\n",
        "        if num_goals < 1:\n",
        "            print(\"Must have at least 1 goal!\")\n",
        "        elif num_goals > 5:\n",
        "            print(\"Maximum 5 goals for this tracker!\")\n",
        "    except ValueError:\n",
        "        print(\"Please enter a valid number!\")\n",
        "\n",
        "# Your task: Collect goal information using for loop\n",
        "# For each goal (1 to num_goals):\n",
        "#   - Get goal name\n",
        "#   - Get target amount (with validation)\n",
        "#   - Get current amount (with validation)\n",
        "#   - Store in the three lists\n",
        "\n",
        "print(f\"\\nEntering {num_goals} savings goals:\")\n",
        "\n",
        "for i in range(num_goals):\n",
        "    print(f\"\\n--- Goal {i+1} ---\")\n",
        "\n",
        "    # Your goal collection code here\n",
        "    name = input(\"Goal name: \")\n",
        "    target_amount = 0\n",
        "    while target_amount <= 0:\n",
        "        try:\n",
        "            target_amount = float(input(\"Target amount: $\"))\n",
        "            if target_amount <= 0:\n",
        "                print(\"Target must be positive!\")\n",
        "        except ValueError:\n",
        "            print(\"Please enter a valid number!\")\n",
        "\n",
        "    current_amount = -1\n",
        "    while current_amount < 0 or current_amount > target_amount:\n",
        "        try:\n",
        "            current_amount = float(input(\"Current amount saved: $\"))\n",
        "            if current_amount < 0:\n",
        "                print(\"Amount cannot be negative!\")\n",
        "            elif current_amount > target_amount:\n",
        "                print(\"Current amount cannot exceed target!\")\n",
        "        except ValueError:\n",
        "            print(\"Please enter a valid number!\")\n",
        "\n",
        "    goal_names.append(name)\n",
        "    goal_targets.append(target_amount)\n",
        "    goal_current.append(current_amount)\n",
        "\n",
        "print(f\"\\n✅ Saved {len(goal_names)} goals!\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tJXKBe7dBoO1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "261c5074-adc7-492e-8217-7154c30a518b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "📊 Goals Progress Analysis:\n",
            "\n",
            "Goal: a\n",
            "Progress: 50.0%\n",
            "Amount remaining: $50.00\n",
            "Estimated months to complete (saving $100/month): 0.5\n",
            "\n",
            "Goal: 1\n",
            "Progress: 40.0%\n",
            "Amount remaining: $60.00\n",
            "Estimated months to complete (saving $100/month): 0.6\n",
            "\n",
            "Goal: aa\n",
            "Progress: 20.0%\n",
            "Amount remaining: $80.00\n",
            "Estimated months to complete (saving $100/month): 0.8\n",
            "\n",
            "Goal: cc\n",
            "Progress: 0.0%\n",
            "Amount remaining: $100.00\n",
            "Estimated months to complete (saving $100/month): 1.0\n",
            "\n",
            "Goal: ccc\n",
            "Progress: 50.0%\n",
            "Amount remaining: $50.00\n",
            "Estimated months to complete (saving $100/month): 0.5\n",
            "\n",
            "🎯 Overall Goals Summary:\n",
            "Total target: $500.00\n",
            "Total saved: $160.00\n",
            "Overall progress: 32.0%\n",
            "Total remaining: $340.00\n",
            "\n",
            "⚠️ Goal needing most attention: cc\n",
            "Current progress: 0.0%\n",
            "You are just starting out on this goal. Keep saving consistently!\n"
          ]
        }
      ],
      "source": [
        "# Goal Analysis and Progress Tracking\n",
        "if len(goal_names) > 0:\n",
        "    print(\"\\n📊 Goals Progress Analysis:\")\n",
        "\n",
        "    # Your task: Analyze each goal\n",
        "    # For each goal, calculate:\n",
        "    #   - Progress percentage\n",
        "    #   - Amount remaining\n",
        "    #   - Months to completion (if saving $100/month)\n",
        "\n",
        "    total_target = 0\n",
        "    total_current = 0\n",
        "\n",
        "    progress_list = []\n",
        "\n",
        "    for i in range(len(goal_names)):\n",
        "        progress_percent = (goal_current[i] / goal_targets[i]) * 100 if goal_targets[i] > 0 else 0\n",
        "        amount_remaining = goal_targets[i] - goal_current[i]\n",
        "        months_to_completion = amount_remaining / 100 if amount_remaining > 0 else 0\n",
        "\n",
        "        print(f\"\\nGoal: {goal_names[i]}\")\n",
        "        print(f\"Progress: {progress_percent:.1f}%\")\n",
        "        print(f\"Amount remaining: ${amount_remaining:.2f}\")\n",
        "        print(f\"Estimated months to complete (saving $100/month): {months_to_completion:.1f}\")\n",
        "\n",
        "        progress_list.append(progress_percent)\n",
        "\n",
        "        total_target += goal_targets[i]\n",
        "        total_current += goal_current[i]\n",
        "\n",
        "    # Overall progress summary\n",
        "    overall_progress = (total_current / total_target) * 100 if total_target > 0 else 0\n",
        "    total_remaining = total_target - total_current\n",
        "\n",
        "    print(f\"\\n🎯 Overall Goals Summary:\")\n",
        "    print(f\"Total target: ${total_target:.2f}\")\n",
        "    print(f\"Total saved: ${total_current:.2f}\")\n",
        "    print(f\"Overall progress: {overall_progress:.1f}%\")\n",
        "    print(f\"Total remaining: ${total_remaining:.2f}\")\n",
        "\n",
        "    # Your task: Find which goal needs most attention\n",
        "    # Find the goal with lowest progress percentage\n",
        "    # Provide encouragement and specific advice\n",
        "\n",
        "    min_progress = progress_list[0]\n",
        "    min_index = 0\n",
        "    for i in range(1, len(progress_list)):\n",
        "        if progress_list[i] < min_progress:\n",
        "            min_progress = progress_list[i]\n",
        "            min_index = i\n",
        "\n",
        "    print(f\"\\n⚠️ Goal needing most attention: {goal_names[min_index]}\")\n",
        "    print(f\"Current progress: {min_progress:.1f}%\")\n",
        "\n",
        "    if min_progress < 25:\n",
        "        print(\"You are just starting out on this goal. Keep saving consistently!\")\n",
        "    elif min_progress < 50:\n",
        "        print(\"Good progress! Stay focused and you’ll reach your goal soon.\")\n",
        "    elif min_progress < 75:\n",
        "        print(\"More than halfway there! Keep up the great work.\")\n",
        "    else:\n",
        "        print(\"Almost at your goal! Just a little more effort needed.\")\n",
        "\n",
        "else:\n",
        "    print(\"No goals to analyze!\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SljnQJDbBoO2"
      },
      "source": [
        "---\n",
        "\n",
        "## Part 4: Simple Menu System (10 minutes)\n",
        "\n",
        "### 🎮 Interactive Program Flow\n",
        "\n",
        "Create a basic menu that lets users choose what to do:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SLbCL-V6BoO3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "692217bc-6c76-40b7-f149-9b6a9a08991f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "=== Interactive Finance Menu ===\n",
            "\n",
            "------------------------------\n",
            "💰 ccc's Finance Tracker\n",
            "📊 Current: 1 expenses, $10.00 spent\n",
            "------------------------------\n",
            "1. View expense summary\n",
            "2. View goals progress\n",
            "3. Add new expense\n",
            "4. Budget check\n",
            "5. Exit\n",
            "\n",
            "Choose option (1-5): 1\n",
            "\n",
            "--- Expense Summary ---\n",
            "1. $10.00 - Com\n",
            "Total expenses: $10.00\n",
            "\n",
            "------------------------------\n",
            "💰 ccc's Finance Tracker\n",
            "📊 Current: 1 expenses, $10.00 spent\n",
            "------------------------------\n",
            "1. View expense summary\n",
            "2. View goals progress\n",
            "3. Add new expense\n",
            "4. Budget check\n",
            "5. Exit\n",
            "\n",
            "Choose option (1-5): 2\n",
            "\n",
            "--- Goals Progress ---\n",
            "a: $50.00/$100.00 (50.0% complete)\n",
            "1: $40.00/$100.00 (40.0% complete)\n",
            "aa: $20.00/$100.00 (20.0% complete)\n",
            "cc: $0.00/$100.00 (0.0% complete)\n",
            "ccc: $50.00/$100.00 (50.0% complete)\n",
            "\n",
            "------------------------------\n",
            "💰 ccc's Finance Tracker\n",
            "📊 Current: 1 expenses, $10.00 spent\n",
            "------------------------------\n",
            "1. View expense summary\n",
            "2. View goals progress\n",
            "3. Add new expense\n",
            "4. Budget check\n",
            "5. Exit\n",
            "\n",
            "Choose option (1-5): 3\n",
            "\n",
            "--- Add New Expense ---\n",
            "Expense amount: $4\n",
            "Description: 5\n",
            "Added expense: $4.00 - 5\n",
            "\n",
            "------------------------------\n",
            "💰 ccc's Finance Tracker\n",
            "📊 Current: 2 expenses, $14.00 spent\n",
            "------------------------------\n",
            "1. View expense summary\n",
            "2. View goals progress\n",
            "3. Add new expense\n",
            "4. Budget check\n",
            "5. Exit\n",
            "\n",
            "Choose option (1-5): 5\n",
            "\n",
            "Goodbye ccc!\n",
            "Final summary: 2 expenses, $14.00 total\n",
            "🚀 Your finance tracker is growing stronger each week!\n",
            "\n",
            "=== Finance Tracker Session Complete ===\n"
          ]
        }
      ],
      "source": [
        "print(\"\\n=== Interactive Finance Menu ===\")\n",
        "\n",
        "# Simple menu system\n",
        "running = True\n",
        "\n",
        "while running:\n",
        "    print(\"\\n\" + \"-\"*30)\n",
        "    print(f\"💰 {name}'s Finance Tracker\")\n",
        "    if len(expenses) > 0:\n",
        "        print(f\"📊 Current: {len(expenses)} expenses, ${sum(expenses):.2f} spent\")\n",
        "    print(\"-\"*30)\n",
        "    print(\"1. View expense summary\")\n",
        "    print(\"2. View goals progress\")\n",
        "    print(\"3. Add new expense\")\n",
        "    print(\"4. Budget check\")\n",
        "    print(\"5. Exit\")\n",
        "\n",
        "    choice = input(\"\\nChoose option (1-5): \")\n",
        "\n",
        "    if choice == \"1\":\n",
        "        # Display expense summary\n",
        "        print(\"\\n--- Expense Summary ---\")\n",
        "\n",
        "        # Your task: Show all expenses with numbers\n",
        "        # Format: \"1. $23.50 - Coffee\"\n",
        "        # Include total at the end\n",
        "        if len(expenses) == 0:\n",
        "            print(\"No expenses recorded yet.\")\n",
        "        else:\n",
        "            for i in range(len(expenses)):\n",
        "                print(f\"{i+1}. ${expenses[i]:.2f} - {descriptions[i]}\")\n",
        "            print(f\"Total expenses: ${sum(expenses):.2f}\")\n",
        "\n",
        "    elif choice == \"2\":\n",
        "        # Display goals progress\n",
        "        print(\"\\n--- Goals Progress ---\")\n",
        "\n",
        "        # Your task: Show each goal with progress percentage\n",
        "        # Format: \"Goal Name: $current/$target (XX% complete)\"\n",
        "        if len(goal_names) == 0:\n",
        "            print(\"No savings goals entered yet.\")\n",
        "        else:\n",
        "            for i in range(len(goal_names)):\n",
        "                progress = (goal_current[i] / goal_targets[i]) * 100 if goal_targets[i] > 0 else 0\n",
        "                print(f\"{goal_names[i]}: ${goal_current[i]:.2f}/${goal_targets[i]:.2f} ({progress:.1f}% complete)\")\n",
        "\n",
        "    elif choice == \"3\":\n",
        "        # Add single new expense\n",
        "        print(\"\\n--- Add New Expense ---\")\n",
        "\n",
        "        # Your task: Add one more expense to existing lists\n",
        "        # Use validation pattern, update totals, give feedback\n",
        "        while True:\n",
        "            expense_input = input(\"Expense amount: $\")\n",
        "            try:\n",
        "                expense_amount = float(expense_input)\n",
        "                if expense_amount <= 0:\n",
        "                    print(\"Amount must be positive!\")\n",
        "                    continue\n",
        "            except ValueError:\n",
        "                print(\"Please enter a valid number!\")\n",
        "                continue\n",
        "            break\n",
        "\n",
        "        desc = input(\"Description: \")\n",
        "\n",
        "        expenses.append(expense_amount)\n",
        "        descriptions.append(desc)\n",
        "        print(f\"Added expense: ${expense_amount:.2f} - {desc}\")\n",
        "\n",
        "    elif choice == \"4\":\n",
        "        # Budget status check\n",
        "        print(\"\\n--- Budget Check ---\")\n",
        "\n",
        "        # Your task: Calculate and display budget status\n",
        "        # Show percentage used, remaining amount, daily budget left\n",
        "        # Give advice based on budget usage\n",
        "        total_spent = sum(expenses) if len(expenses) > 0 else 0\n",
        "        percent_used = (total_spent / monthly_budget) * 100 if monthly_budget > 0 else 0\n",
        "        remaining = monthly_budget - total_spent\n",
        "        days_left = 30  # Assume 30-day month for simplicity\n",
        "        daily_budget_left = remaining / days_left if remaining > 0 else 0\n",
        "\n",
        "        print(f\"Budget used: {percent_used:.1f}%\")\n",
        "        print(f\"Remaining budget: ${remaining:.2f}\")\n",
        "        print(f\"Daily budget left (assuming 30 days/month): ${daily_budget_left:.2f}\")\n",
        "\n",
        "        if percent_used >= 100:\n",
        "            print(\"Alert! You have exceeded your budget!\")\n",
        "        elif percent_used > 90:\n",
        "            print(\"Warning: You are close to your budget limit.\")\n",
        "        elif percent_used > 75:\n",
        "            print(\"Caution: Over 75% of your budget used.\")\n",
        "        else:\n",
        "            print(\"Good job! You are within your budget.\")\n",
        "\n",
        "    elif choice == \"5\":\n",
        "        # Exit with summary\n",
        "        running = False\n",
        "        print(f\"\\nGoodbye {name}!\")\n",
        "        print(f\"Final summary: {len(expenses)} expenses, ${sum(expenses) if expenses else 0:.2f} total\")\n",
        "        print(\"🚀 Your finance tracker is growing stronger each week!\")\n",
        "\n",
        "    else:\n",
        "        print(\"Invalid choice! Please choose 1-5.\")\n",
        "\n",
        "print(\"\\n=== Finance Tracker Session Complete ===\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uxg0YRKuBoO5"
      },
      "source": [
        "---\n",
        "\n",
        "## Part 5: Testing Your Enhanced Tracker (10 minutes)\n",
        "\n",
        "### 🧪 Complete System Test\n",
        "\n",
        "Test your loop-powered finance tracker with realistic data:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-za70xSEBoO6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c75890f4-6a29-468c-f5c2-8dd5cd08847c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🧪 TEST SCENARIO:\n",
            "\n",
            "Setup:\n",
            "- Name: Your name\n",
            "- Budget: $2000\n",
            "\n",
            "Goals (try 2 goals):\n",
            "- \"Emergency Fund\": target $1000, current $250\n",
            "- \"Vacation\": target $500, current $50\n",
            "\n",
            "Expenses to enter:\n",
            "- $450 for \"Rent payment\"\n",
            "- $67.50 for \"Weekly groceries\"\n",
            "- $89.00 for \"Gas for car\"\n",
            "- done\n",
            "\n",
            "Then test each menu option:\n",
            "1. View expense summary (should show 3 expenses)\n",
            "2. View goals progress (should show percentages)\n",
            "3. Add expense: $25 for \"Coffee\"\n",
            "4. Budget check (should show updated totals)\n",
            "5. Exit\n",
            "\n",
            "Expected final result:\n",
            "- 4 expenses totaling $631.50\n",
            "- 31.6% of budget used\n",
            "- Emergency fund 25% complete\n",
            "- Vacation fund 10% complete\n",
            "\n",
            "\n",
            "⬆️ Run your enhanced tracker above with this test data!\n",
            "Check that all numbers match the expected results.\n"
          ]
        }
      ],
      "source": [
        "# Test your tracker with this scenario:\n",
        "test_instructions = \"\"\"\n",
        "🧪 TEST SCENARIO:\n",
        "\n",
        "Setup:\n",
        "- Name: Your name\n",
        "- Budget: $2000\n",
        "\n",
        "Goals (try 2 goals):\n",
        "- \"Emergency Fund\": target $1000, current $250\n",
        "- \"Vacation\": target $500, current $50\n",
        "\n",
        "Expenses to enter:\n",
        "- $450 for \"Rent payment\"\n",
        "- $67.50 for \"Weekly groceries\"\n",
        "- $89.00 for \"Gas for car\"\n",
        "- done\n",
        "\n",
        "Then test each menu option:\n",
        "1. View expense summary (should show 3 expenses)\n",
        "2. View goals progress (should show percentages)\n",
        "3. Add expense: $25 for \"Coffee\"\n",
        "4. Budget check (should show updated totals)\n",
        "5. Exit\n",
        "\n",
        "Expected final result:\n",
        "- 4 expenses totaling $631.50\n",
        "- 31.6% of budget used\n",
        "- Emergency fund 25% complete\n",
        "- Vacation fund 10% complete\n",
        "\"\"\"\n",
        "\n",
        "print(test_instructions)\n",
        "print(\"\\n⬆️ Run your enhanced tracker above with this test data!\")\n",
        "print(\"Check that all numbers match the expected results.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fQHbre2sBoO7"
      },
      "source": [
        "---\n",
        "\n",
        "## Part 6: Reflection and Planning (10 minutes)\n",
        "\n",
        "### 🤔 What You've Accomplished\n",
        "\n",
        "Reflect on your computational thinking growth this week:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Q5mU0EncBoO7"
      },
      "outputs": [],
      "source": [
        "# Week 3 Reflection Questions (answer as comments)\n",
        "\n",
        "# LOOP PATTERN MASTERY:\n",
        "# I used a while loop when I needed to keep asking the user for input\n",
        "# until they gave a correct answer or typed \"done\" to stop.\n",
        "# I used for loops when I needed to go through a list of items, like\n",
        "# showing all expenses or all goals.\n",
        "\n",
        "# PROBLEM SOLVING:\n",
        "# To handle multiple expenses, I made a loop that keeps asking for\n",
        "# new expenses until the user types \"done\".\n",
        "# The hardest part was making sure the user entered only positive\n",
        "# numbers and handling mistakes without crashing.\n",
        "\n",
        "# DATA PROCESSING:\n",
        "# Storing expenses in lists lets me keep many expenses and their\n",
        "# descriptions together.\n",
        "# This made it possible to do things like find the highest and lowest\n",
        "# expenses, calculate totals, averages, and categorize expenses by size.\n",
        "\n",
        "# AI PARTNERSHIP:\n",
        "# I used AI to help me write and fix loops that check for valid input,\n",
        "# and to write code that analyzes data in the lists.\n",
        "# The best questions were about how to safely get user input and how\n",
        "# to find minimum and maximum values in a list.\n",
        "\n",
        "# FUTURE FEATURES:\n",
        "# I want to add features like monthly reports, alerts when spending is\n",
        "# high, and maybe graphs to see my money visually.\n",
        "# AI might help by giving me tips on saving money or predicting when I\n",
        "# might run out of budget.\n",
        "\n",
        "print(\"🎯 Week 3 reflection complete!\")\n",
        "print(\"Ready for Week 4: String processing and smart categorization!\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3L-VsTs9BoO8"
      },
      "source": [
        "---\n",
        "\n",
        "## 🏆 Mini-Project Complete!\n",
        "\n",
        "### **What You've Built:**\n",
        "Enhanced your finance tracker with **loop-powered capabilities**:\n",
        "\n",
        "✅ **Multi-Transaction Entry**: Handle multiple expenses in one session  \n",
        "✅ **Smart Validation**: Robust input checking with helpful error messages  \n",
        "✅ **Data Storage**: Transaction history saved in lists for analysis  \n",
        "✅ **Basic Analysis**: Statistics, categorization, and insights  \n",
        "✅ **Goal Tracking**: Multiple savings goals with progress monitoring  \n",
        "✅ **Interactive Menus**: User-controlled program flow  \n",
        "\n",
        "### **Programming Skills Mastered:**\n",
        "- **While loops** for input validation and unknown repetition\n",
        "- **For loops** for known counts and collection processing\n",
        "- **Sentinel values** for user-controlled data entry\n",
        "- **List operations** for data storage and retrieval\n",
        "- **Menu systems** for interactive programs\n",
        "\n",
        "### **Computational Thinking Growth:**\n",
        "- **Pattern Recognition**: Identifying when repetition is needed\n",
        "- **Decomposition**: Breaking complex features into loop patterns\n",
        "- **Abstraction**: Reusable validation and analysis patterns\n",
        "- **Algorithm Design**: Planning loop logic before implementation\n",
        "\n",
        "### **Finance Tracker Evolution:**\n",
        "- **Week 1**: Basic calculations\n",
        "- **Week 2**: Smart decisions with if/elif/else\n",
        "- **Week 3**: **Loop-powered data collection and analysis**\n",
        "- **Week 4 Preview**: String processing for automatic categorization\n",
        "\n",
        "### **🚀 Next Week Preview:**\n",
        "Week 4 will add **string manipulation** to your tracker:\n",
        "- Automatically categorize expenses by description\n",
        "- Parse and clean transaction text\n",
        "- Smart search through transaction descriptions\n",
        "- Prepare for natural language processing\n",
        "\n",
        "### **🎯 Success Check:**\n",
        "You're successful if:\n",
        "- Your tracker handles multiple transactions smoothly\n",
        "- You understand when to use each loop type\n",
        "- Your validation prevents crashes from bad input\n",
        "- You can explain your loop choices to others\n",
        "- You're excited about adding string processing next week\n",
        "\n",
        "### **💾 Save Your Work!**\n",
        "Your loop-powered tracker is the foundation for Week 4's string processing features. Keep building this same project each week!\n",
        "\n",
        "---\n",
        "\n",
        "**🌟 Excellent work! You've transformed your finance tracker from a simple calculator into a data-driven analysis tool. Next week we'll make it even smarter with text processing! 💰🔄**"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "name": "python",
      "version": "3.9.0"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}